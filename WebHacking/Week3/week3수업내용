<?php
  echo $name;
?>

<?=$name?>

위에 두개 코드는 같은 코드임

mysqli_close($conn) 이라고 마지막에 쓰는게 좋음
쓰지 않으면 느려질 수 있는 이슈


* 로그인(과정) : 인증.

- OTP 번호 인증 우회 취약점.

로그인 : 그 사람이 맞는지 확인하는 작업.
식별 / 인증

식별 : 수많은 데이터 중에서 특정 데이터를 찾아내는(후레쉬로 비추는) 작업
식별 정보 : unique(유일성)
ex) 아이디 전화번호 이메일

id는 primary key로 유일
고유 식별 정보 ex) 주민번호, 운전면허, 여권 번호

그런데 식별정보는 공개되어도 됨. 당연함 = id 유출 의미 없음
하지만 고유 식별 정보는 공개되면 위험


인증 : 그 사람이 본인이 맞는지 확인하는 작업
인증정보 ex) 비밀번호

-> 식별은 수많은 사람들 중 특정한 사람을 찝어내는 것. 그리고 그 사람이 맞는지 확인하는 것 = 인증

select * from member id = 'normaltic'; -> 식별

** 식별정보는 노출이 되어도 상관 없지만 인증 정보는 노출되면 안됨

식별과 인증.
로직

로그인 로직 케이스

(1) 식별/인증 동시 로직
DB 질의를 한번에 수행 로그인 구현

// sudo 코드임. 가짜코드 대략적인 코드.
$sql = "select * from member where"
$sql .=id="_____" and pass="_______"

$ret = $sql.execute();

if ($ret) {
// 로그인 성공
} else {
// 로그인 실패
}


(2) 식별/인증 분리
sql = select * from member where id ='_____' #식별

$db_pass = sql.ret['pass']

if ($db_pass == $user_pass) {
// 로그인 성공
} else {
// 로그인 실패
}


(+) HASH : 1방향 함수(반대로 복구가 불가능) <-> 암호화(어떤 데이터를 이상한 모양으로 바꾸는 것) 인코딩(글자의 모양을 바꿈)과는 다른 개념
  해시도 어떤 데이터를 다른 데이터로 바꿈 그리고 암호화된 데이터는 다시 원래 상태로 바꿀 수 있음 인코딩도 마찬가지
  하지만 해시는 원래 상태의 데이터로 바꿀 수 없음
  (계란 후라이를 만들고 다시 날달걀로 못바꿈)

  암호화는 원래 상태로 돌아가기 위해서 키가 필요. 인코딩은 키 필요 없음
  데이터를 효율적으로 보내기 위해서 인코딩을함.


  모양을 바꾸는 것인데 다시 되돌릴 수 없는 상태로 바꾸는 것
  비밀번호는 해시화 해서 저장을 함
  -> 로그인 기능 지장 없음
  어려운 비밀번호로 하면 해시를 못뚫음. 하지만 쉬운 비밀번호는 가능하지
  같은 알고리즘을 사용하기 때문

  -> 지금까지 4가지
  식별인증 동시, 식별인증 분리, 식별인증 동시 해시, 식별인증 분리 해시


  QNA
  ____________________________________________________

  해시 알고리즘을 알아도 못뚫음


  *로그인
  *유지

  쿠키
  출발지 : client, 해커도 출발지임
  쿠키 값을 내 마음대로 바꿀 수도 있음 -> 쿠키 변조

  2000년대 초.
  대학교 사이트.
  쿠키로 인증. 많았다. ㅋㅋㅋ

  * 쿠키가 클라이언트 측 저장.(문제)


  쿠키에 저장하는 문제점을 해결하기 위해
  * 세션
  -> 서버에 저장.

  <?php
    session_start();

    $_SESSION['id'] = 'normaltic';
  ?>

  누구의 정보인지 알 길이 없음
  identify 식별 정보를 만든다.
  1.
  2.
  3.
  4.
  5.

  포스트잇에다가 session 아이디를 1번이라고 하고 나한테 요청해달라
  페이지에 들어갈때, 웹사이트는 포스트잇을 보고 맞으면 바로 접속

  세션 : 서버에 데이터 정보를 저장하는 것
  세션 ID : 식별하는 데이터
  쿠키에 들어가는 것은 session ID 임
  세션은 서버에 파일로 저장이 됨

  원래 세션 id는 빈 값이지만, 들어가려고 할때, 그 세션 ID에다가 입력을 하는 것임
  세션이 닫히면 다시 입력해야함
  세션은 table 형태 느낌임

  세션은 서버에 저장되는 정보 ex) 1,2,3,4,5
  그 옆에 들어가는 식별하는 값 : session ID
  세션 아이디를 들고 오면, 그 정보를 사용함

  세션 아이디 1번을 지우고 2번을 쓰게 되면 2번으로 로그인 됨
  그러니까 세션 아이디는 1,2,3,4 이렇게 하면 안됨
  세션 ID는 랜덤한 문자열로 생성됨

  그러면 !
  해커는 세션 ID 탈취를 목표로 함
  쿠키를 잘 뜯어보면 세션 id가 들어있음
  세션 ID를 잘 복사해서 들어가면 로그인이 된다!

  네이버 / 유튜브 계정 해킹.
  -> 세션 ID 탈취.

  로그인 할 때마다 세션 ID를 새로 준다.
  새로 로그인 하면 기존 세션은 파기가 됨
  각각 웹사이트마다 세션ID와 쿠기는 당연히 별개임


  ** 은행
  3분 자동 로그아웃.
  -> 정보보안 전문가들이 시킴.


  * 과제
  요새는 JWT로 로그인을 함
  3개의 덩어리로 존재함(JWT 공부)

  [1] 오늘 수업 복습
  - 로그인 로직 이해 (식별/인증)
  [2] 지난 과제 (특별과제 제외)
  [3] 로그인 페이지 (로직 4개)
  - 식별/인증 동시
  - 식별/인증 분리
  - 식별/인증 동시 (with Hash)
  - 식별/인증 분리 (with Hash)
  이 외에도 여러가지가 또 있음

  (+ 추가 과제)
  - jwt 찾아보기.
  - jwt 로그인 만들어보기.