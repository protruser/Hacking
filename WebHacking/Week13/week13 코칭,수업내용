13주차!

<보고서 피드백>

1페이지 : 날짜
2페이지 : 목차

보기에 탐색창이라는 기능이 있는데 왼쪽에 화면이 나왔다 들어갔다함
목차를 설정할 수 있는 기능임
이용할 것

word의 자르기 기능을 이용하여 자를 수 있음
사진과 글씨를 맞추기

보고서에 하이퍼 링크를 적지 말고 링크 자체를 적을 것

(예시) 메인페이지에 있는 마이페이지를 클릭합니다.

burp 화면을 전체 캡쳐할 경우 너무 글씨가 작게 나옴
-> 약간 자를 필요가 있음

왜 이런 특수문자, 코드를 적었는지 이유가 있어야 함

* 모의해킹 결과 보고서

* 연구 보고서 : 각 스텝별로 왜 이렇게 시도를 했는지 적어주기
작성해야 하는 것은 연구 보고서임

최소 글꼴 : 10포인트

디테일 한 것은 좋지만 의미 없는 디테일은 별로


* CSRF vs XSS

XSS : 클라이언트 측에서 실행하는 스크립트를 삽입하는 공격
CSRF : 피해자가 원하지 않는데 공격자가 원하는 요청을 보내게 하는 공격

GET Method
http://vuln.com/mypage.php?pass=1234

POST Method
<form> -> XSS

* CSRF 대응 방법 !!

> referer check
이 요청이 어디에서 전송되고 있는지 나옴

게시판 글에서 비밀번호 요청이 날라간다?!
referer : read_content.php?id=123
referer : mypage.php

referer 체크를 해서 필터를함
-> 다만 확장성이 떨어지는 단점이 있음

예외처리.

> 문제가 발생하면? -> 통과시켜주자!
문제가 발생했을 때 서비스가 안되면.. 문제가 있기 때문

try

catch

레퍼러 체크 우회 : <meta name="referrer" content="no-referrer">
물론 제대로 레퍼러 체크를 한다면 우회할 수 있는 방법이 없음



* 근본적인 방법
>> 인증정보를 넣는 것.
>> 레퍼러 체크
>> CSRF 토큰 추가

CSRF가 일어나는 이유? 요청을 위조했기 때문.
>> 파라미터에 인증정보를 넣기

예를들어
<form ~~~>
<input name="pass" value="1234" >
<input name="old_pass" value="????" >
</form>

그러나 모든 서비스에 인증 정보를 넣으면..?
서비스 이용하기에 너무 불편함

따라서 어느 부분까지 CSRF 취약점으로 잡는지는 컨설턴트의 주관이 크게 작용

__________________________________________

CSRF - POST Method인 경우.
<form> -> XSS

vuln.com/mypage.php

normaltic.com/comeon.html

<form action="vuln.com/mypage.php">
<input
</form>

<script>
  .submit();
</script>

위에처럼 페이지를 새로 만들고 접속을 유도하면 되지 않나?
그렇지 못하는 이유

SOP / CORS

* SOP
Same-Origin-Policy

vuln.com/mypage.php

normaltic.com/attack.html
<iframe src="http://vuln.com/mypage.php">

<script>
  다른 출처의 자원에 접근하지 못하게 브라우저가 막는 것
</script>
응답은 오지만 브라우저가 읽지못하게 막음

같은 출처의 기준?!

- 도메인
- 스키마
- 포트
3가지

https://normaltic.com:80

도메인 같아야하고,(도메인)
https http 같아야하고(스키마)
포트 번호도 같아야함(포트)

세개가 같으면 같은 출처라고 인정을 하겠다는 것

무조건 안된다!!!

숨구멍을 만들어줘!!!

CORS : 몇 가지 규칙을 줄게!
다른 출처에서도 데이터를 쓰게 함!

Cross Origin Resource Sharing

ACAO 헤더 - ACAO 헤더를 보고 허용할지 판단을 할께
응답에 들어감
Access-Control-Allow-Origin

normaltic.com 페이지에서
<iframe src="vuln.com/mypage.php">

<script>
  // 사용하고 싶어!
</script>

이 자원을 허용할 도메인을 등록해주는 것

iframe 태그를 이용하면 로드는 됨.
서버는 데이터를 가져와서 브라우저에 로드는 되지만
자바스크립트가 데이터에 접근이 안되는 것은 SOP / CORS 정책을 따름

<정리>
데이터를 요청할 수는 있음
요청하면 데이터는 서버로부터 옴
하지만 자바스크립트로 데이터에 접근을 할 수가 없음(SOP)
SOP 규약을 조금 유하게 풀어준 것이(CORS)


SOP -> CORS
: White List

개발자가 일을 하지만 매번 화이트리스트로 소스를 추가하기 너무 힘듦.
-> ACAO : * (마법의 단어)

웹 브라우저 개발자가 * 금지
-> 웹 개발자들의 반발

* 허락할게!
대신!!
타 도메인에서 쿠키를 포함해서 요청한 것에 대한 응답은 * 못씀!

마이페이지 같은 쿠키데이터가 필요한 곳은 중요한 사이트이므로
ACAO : * 인정안함!
ACAC(Access-Control-Allow-Credentials) : true;
> 쿠키 데이터를 포함한 요청에 대한 응답이다 라는뜻

-> 쿠키를 이용한 곳에는 데이터를 못쓴다는 뜻

그러나 개발자가 또 귀찮음
Origin에 있는 모든 소스를 ACAO에서 허용해주자.
-> SOP가 없는 것이나 마찬가지
https://testtesttest 같은 origin 요청도 허용을 해주는 문제


CSRF 취약점을 찾았는데 GET 방식이면 그냥 url공격 가능
POST 방식이면 parameter을 넣을 방법을 찾아야하는데
이때 우회가 안된다면
CORS 설정이 제대로 되어 있는지 확인해봄.
이상한 url을 넣었는데 그대로 ACAO에 등록이 된다면,
공격자 url로 공격 가능
그러나 CORS 설정이 제대로 되어있는 사이트라면
그 도메인에서 데이터를 요청해야 잘 응답이 되기 때문에 도메인 내에서만 공격이 가능

CSRF는 CSRF이다.
단 어떤 조건에서는 XSS의 도움을 받아야하는 공격
모든 요청에서 가능하기 때문에
공격자가 위조할 수 있는지 확인하는 것이 point

Referer : 어느 페이지에서 왔는지 알려주는 헤더(어느 경로에서 이 요청이 보내졌는지)(경로)
Origin : 이 요청이 어느 페이지에서 가는가(도메인)

******뭐가 경로고 뭐가 도메인인지 강의 확인

<과제>
- CSRF 고민해서 풀어보기!
- CSRF 정리 (SOP, CORS)
- 웹 개발. (기능)
> 웹 경로에 있는 파일을 압축, db 파일하나 웹 소스코드 하나