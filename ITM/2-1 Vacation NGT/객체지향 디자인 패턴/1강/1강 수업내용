-디자인 패턴에 대하여 알아봅시다-

객체지향 프로그래밍을 위한 설계 이론

1. 객체 지향을 위한 디자인 패턴은 소프트웨어의 중요한 요소를 향상시킴
reuse, flexibility, extensibility, modularity
2. 디자인 패턴을 사용하면 소프트웨어 개발의 communication에 도움이 됨
3. 좋은 설계는 좋은 소프트웨어나 오픈소스에 대해 학습하거나, 많은 경험과 연습에 의해 훈련될 수 있기에 디자인 패턴을 공부함으로써 이미 증명된 스킬과 경험을 배울 수 있음
4. 높은 결합도를 가지거나 알고리즘 종속성, 객체의 표현이나 구현에 종속적으로 구현된 소프트웨어의 리팩토링을 가능하게 함
5. 결국 좋은 설계를 유도하여 소프트웨어의 유지보수에 들어가는 비용을 절약할 수 있음


-객체지향 프로그래밍과 객체지향 설계-

추상화
* 어떤 영역에서 필요로 하는 속성이나 기능을 추출하는 작업
* 데이터 구조, 표현방법에 대한 추상화
* 처리 과정에 대한 추상화

캡슐화
* 데이터를 감싸서 외부에서 사용 가능한 부분만을 제공 (information hiding)
* 사용하는 코드(클라이언트 코드)가 세부적인 사항을 알 필요가 없음
* 단순한 접근을 제공하여 오류가 생길 부분을 감소함

-> 내 데이터를 보호하기 위한 목적

상속성
* 일반적인(general) 개념의 객체에서 보다 구체적인(specific) 개념의 객체의 관계를 표현
* 상속관계의 클래스는 상위 클래스의 타입을 내포함
* 상위 클래스의 속성과 기능을 하위 클래스에서 사용하거나 재정의 할 수 있음

다형성
* 같은 메세지, 같은 구현에 대해 객체가 다른 표현과 결과를 나타내는 것
-> 코드는 한 줄 인데, 결과가 다를 수 있음
* 클래스의 상속, 인터페이스의 구현 시에 각각의 다른 구현을 가진 클래스들이 상위 타입으로 업캐스팅이 되고
이때, 각 클래스에서 오버라이딩한 메서드가 존재하는 경우 같은 상위 타입으로 선언된다 하더라도 각기 다른 인스턴스의 메서드가 호출되는 것
C++의 경우 virtual function만이 재정의된 함수가 호출되지만 자바의 경우는 모든 메서드가 가상함수 기반으로 구현되므로 하위 클래스에 재정의된 메서드가 있는 경우 재정의된 메서드가 호출 됨


Abstract Class vs Concrete Class
* Abstract 클래스는 다 구현하지 않은 부분이 상속되게끔

Class Inheritance vs Object Composition
* 재사용

Interface Inheritance vs Implementation Inheritance


응집도(Cohesion)와 결합도(Coupling)
* 잘 만들어진 소프트웨어는 응집도는 높고 결합도는 낮아야함

응집도
* 하나의 모듈, 객체 내부의 요소들간의 연관성
* 하나의 책임을 구현하는 하나의 객체는 높은 응집도를 가짐

결합도
* 객체 상호간의 연관관계
* 결합도가 높으면 하나의 객체를 수정할 때 다른 객체도 수정해야함

-> 응집도는 높고 결합도는 낮게 설계